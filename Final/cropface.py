# -*- coding: utf-8 -*-
"""CropFace.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QNCVAIbWCmKGmropVz3nlv71UWDLl-47
"""

from PIL import Image
import face_recognition

def sudut_mata_center(arr1,arr2):
    #arr1 = mata kiri
    #arr2 = mata kanan

    from math import acos, pi, sqrt
    from shapely.geometry import Polygon

    def get_center(arr):
        c = Polygon(arr).centroid.coords.xy
        return [c[0][0],c[1][0]]

    p1 = get_center(arr1)
    p2 = get_center(arr2)

    a = abs(p1[0] - p2[0])
    b = abs(p1[1] - p2[1])
    c = sqrt(a**2+b**2)
    cos_A = a/c
    angle = acos(cos_A)
    return (angle * 180) / pi



def crop_face(image):
    """
    Parameters
    ----------
    filepath : path
        Path gambar yang akan di crop di bagian wajah

    Return
    -------
        Gambar yang sudah di crop di bagian wajah.
    """
    #image = face_recognition.load_image_file(f)

    face_locations = face_recognition.face_locations(image)
    face_landmarks_list = face_recognition.face_landmarks(image)

    try:
        angle1 = -5
        angle2 = 5
        i = 0
        angle_plus = 0
        while (len(face_locations) == 0 or len(face_landmarks_list)==0 or (len(face_landmarks_list) != len(face_locations))) and (face_landmarks_list[0]['left_eye'][0][1] == face_landmarks_list[0]['right_eye'][0][1]) :
          if i%2 ==0:
              image = Image.open(filepath)
              image = image.rotate(angle1)
              image = np.asarray(image)
              face_locations = face_recognition.face_locations(image,model="cnn")
              face_landmarks_list = face_recognition.face_landmarks(image)

              if angle1 == -90:
                    return image
              
              angle1 -= 5
              angle_plus = angle1
          else:
              image = Image.open(filepath)
              image = image.rotate(angle2)
              image = np.asarray(image)
              face_locations = face_recognition.face_locations(image,model="cnn")
              face_landmarks_list = face_recognition.face_landmarks(image)

              if angle2 == 90:
                    return image
              
              angle2 += 5
              angle_plus = angle2

    except:
        angle = -90
        angle_plus = 0
        while len(face_locations) == 0 or len(face_landmarks_list)==0 or (len(face_landmarks_list) != len(face_locations)) or (face_landmarks_list[0]['left_eye'][0][1] == face_landmarks_list[0]['right_eye'][0][1]) :
           image = Image.open(filepath)
           image = image.rotate(angle)
           image = np.asarray(image)
           face_locations = face_recognition.face_locations(image,model="cnn")
           face_landmarks_list = face_recognition.face_landmarks(image)

           if angle == 90:
              return image
                  
           angle += 5
           angle_plus = angle

    if len(face_locations) == 0:
      return Image.fromarray(image)

    

    pil_image = []
    luas = []
    try:
      for face_location in face_locations:
          top, right, bottom, left = face_location
          luas = luas + [abs(top-bottom)*abs(right-left)]
          plus = int(0.2*abs(top-bottom))
          if left <= plus:
            face_image = image[top-plus:bottom+plus, 0:right+plus]
          elif right <= plus:
            face_image = image[top-plus:bottom+plus, left-plus:right]
          elif top <= plus:
            face_image = image[0:bottom+plus, left-plus:right+plus]
          elif bottom <= plus:
            face_image = image[top-plus:bottom, left-plus:right+plus]
          else:
            face_image = image[top-plus:bottom+plus, left-plus:right+plus]
          pil_image = pil_image + [face_image]
    except:
        for face_location in face_locations:
          top, right, bottom, left = face_location
          luas = luas + [abs(top-bottom)*abs(right-left)]
          plus = 0
          if left <= plus:
            face_image = image[top-plus:bottom+plus, 0:right+plus]
          elif right <= plus:
            face_image = image[top-plus:bottom+plus, left-plus:right]
          elif top <= plus:
            face_image = image[0:bottom+plus, left-plus:right+plus]
          elif bottom <= plus:
            face_image = image[top-plus:bottom, left-plus:right+plus]
          else:
            face_image = image[top-plus:bottom+plus, left-plus:right+plus]
          pil_image = pil_image + [face_image]
    
  
    idx = luas.index(max(luas))

    if len(face_locations) > 1:
        sudut = sudut_mata_center(face_landmarks_list[idx]['left_eye'],
                                  face_landmarks_list[idx]['right_eye'])
        if face_landmarks_list[idx]['left_eye'][0][1] > face_landmarks_list[idx]['right_eye'][0][1]:
          sudut = - sudut
        else:
          sudut = sudut
    else:
        sudut = sudut_mata_center(face_landmarks_list[0]['left_eye'],
                                  face_landmarks_list[0]['right_eye'])
        if face_landmarks_list[0]['left_eye'][0][1] > face_landmarks_list[0]['right_eye'][0][1]:
          sudut = - sudut
        else:
          sudut = sudut
    
    
    image = Image.open(filepath)
    image = image.rotate(angle_plus+sudut)
    image = np.asarray(image)

    face_locations = face_recognition.face_locations(np.asarray(image),model="cnn")

        
    pil_image = []
    luas = []

    try:
      for face_location in face_locations:
          top, right, bottom, left = face_location
          luas = luas + [abs(top-bottom)*abs(right-left)]
          plus = int(0.2*abs(top-bottom))
          if left <= plus:
            face_image = image[top-plus:bottom+plus, 0:right+plus]
          elif right <= plus:
            face_image = image[top-plus:bottom+plus, left-plus:right]
          elif top <= plus:
            face_image = image[0:bottom+plus, left-plus:right+plus]
          elif bottom <= plus:
            face_image = image[top-plus:bottom, left-plus:right+plus]
          else:
            face_image = image[top-plus:bottom+plus, left-plus:right+plus]
          pil_image = pil_image + [face_image]
    except:
        for face_location in face_locations:
          top, right, bottom, left = face_location
          luas = luas + [abs(top-bottom)*abs(right-left)]
          plus = 0
          if left <= plus:
            face_image = image[top-plus:bottom+plus, 0:right+plus]
          elif right <= plus:
            face_image = image[top-plus:bottom+plus, left-plus:right]
          elif top <= plus:
            face_image = image[0:bottom+plus, left-plus:right+plus]
          elif bottom <= plus:
            face_image = image[top-plus:bottom, left-plus:right+plus]
          else:
            face_image = image[top-plus:bottom+plus, left-plus:right+plus]

          pil_image = pil_image + [face_image]

    idx = luas.index(max(luas))
    img = Image.fromarray(pil_image[idx])
    return img

    
def crop_face2(image):
    """ Sama seperti fungsi crop_face, hanya saja menggunakan model="CNN" untuk mendeteksi wajah,
        membutuhkan waktu komputasi lebih lama, sehingga digunakan jika fungsi crop_face gagal
        mendeteksi wajah.
        
    Parameters
    ----------
    filepath : path
        Path gambar yang akan di crop di bagian wajah

    Return
    -------
        Gambar yang sudah di crop di bagian wajah.
    """

    #image = face_recognition.load_image_file(f)

    face_locations = face_recognition.face_locations(image,model="cnn")
    face_landmarks_list = face_recognition.face_landmarks(image,model="cnn")

    try:
        angle1 = -5
        angle2 = 5
        i = 0
        angle_plus = 0
        while (len(face_locations) == 0 or len(face_landmarks_list)==0 or (len(face_landmarks_list) != len(face_locations))) and (face_landmarks_list[0]['left_eye'][0][1] == face_landmarks_list[0]['right_eye'][0][1]) :
          if i%2 ==0:
              image = Image.open(filepath)
              image = image.rotate(angle1)
              image = np.asarray(image)
              face_locations = face_recognition.face_locations(image,model="cnn")
              face_landmarks_list = face_recognition.face_landmarks(image)

              if angle1 == -90:
                    return image
              
              angle1 -= 5
              angle_plus = angle1
          else:
              image = Image.open(filepath)
              image = image.rotate(angle2)
              image = np.asarray(image)
              face_locations = face_recognition.face_locations(image,model="cnn")
              face_landmarks_list = face_recognition.face_landmarks(image)

              if angle2 == 90:
                    return image
              
              angle2 += 5
              angle_plus = angle2

    except:
        angle = -90
        angle_plus = 0
        while len(face_locations) == 0 or len(face_landmarks_list)==0 or (len(face_landmarks_list) != len(face_locations)) or (face_landmarks_list[0]['left_eye'][0][1] == face_landmarks_list[0]['right_eye'][0][1]) :
           image = Image.open(filepath)
           image = image.rotate(angle)
           image = np.asarray(image)
           face_locations = face_recognition.face_locations(image,model="cnn")
           face_landmarks_list = face_recognition.face_landmarks(image)

           if angle == 90:
              return image
                  
           angle += 5
           angle_plus = angle

    if len(face_locations) == 0:
      return Image.fromarray(image)

    

    pil_image = []
    luas = []
    try:
      for face_location in face_locations:
          top, right, bottom, left = face_location
          luas = luas + [abs(top-bottom)*abs(right-left)]
          plus = int(0.2*abs(top-bottom))
          if left <= plus:
            face_image = image[top-plus:bottom+plus, 0:right+plus]
          elif right <= plus:
            face_image = image[top-plus:bottom+plus, left-plus:right]
          elif top <= plus:
            face_image = image[0:bottom+plus, left-plus:right+plus]
          elif bottom <= plus:
            face_image = image[top-plus:bottom, left-plus:right+plus]
          else:
            face_image = image[top-plus:bottom+plus, left-plus:right+plus]
          pil_image = pil_image + [face_image]
    except:
        for face_location in face_locations:
          top, right, bottom, left = face_location
          luas = luas + [abs(top-bottom)*abs(right-left)]
          plus = 0
          if left <= plus:
            face_image = image[top-plus:bottom+plus, 0:right+plus]
          elif right <= plus:
            face_image = image[top-plus:bottom+plus, left-plus:right]
          elif top <= plus:
            face_image = image[0:bottom+plus, left-plus:right+plus]
          elif bottom <= plus:
            face_image = image[top-plus:bottom, left-plus:right+plus]
          else:
            face_image = image[top-plus:bottom+plus, left-plus:right+plus]
          pil_image = pil_image + [face_image]
    
  
    idx = luas.index(max(luas))

    if len(face_locations) > 1:
        sudut = sudut_mata_center(face_landmarks_list[idx]['left_eye'],
                                  face_landmarks_list[idx]['right_eye'])
        if face_landmarks_list[idx]['left_eye'][0][1] > face_landmarks_list[idx]['right_eye'][0][1]:
          sudut = - sudut
        else:
          sudut = sudut
    else:
        sudut = sudut_mata_center(face_landmarks_list[0]['left_eye'],
                                  face_landmarks_list[0]['right_eye'])
        if face_landmarks_list[0]['left_eye'][0][1] > face_landmarks_list[0]['right_eye'][0][1]:
          sudut = - sudut
        else:
          sudut = sudut
    
    
    image = Image.open(filepath)
    image = image.rotate(angle_plus+sudut)
    image = np.asarray(image)

    face_locations = face_recognition.face_locations(np.asarray(image),model="cnn")

        
    pil_image = []
    luas = []

    try:
      for face_location in face_locations:
          top, right, bottom, left = face_location
          luas = luas + [abs(top-bottom)*abs(right-left)]
          plus = int(0.2*abs(top-bottom))
          if left <= plus:
            face_image = image[top-plus:bottom+plus, 0:right+plus]
          elif right <= plus:
            face_image = image[top-plus:bottom+plus, left-plus:right]
          elif top <= plus:
            face_image = image[0:bottom+plus, left-plus:right+plus]
          elif bottom <= plus:
            face_image = image[top-plus:bottom, left-plus:right+plus]
          else:
            face_image = image[top-plus:bottom+plus, left-plus:right+plus]
          pil_image = pil_image + [face_image]
    except:
        for face_location in face_locations:
          top, right, bottom, left = face_location
          luas = luas + [abs(top-bottom)*abs(right-left)]
          plus = 0
          if left <= plus:
            face_image = image[top-plus:bottom+plus, 0:right+plus]
          elif right <= plus:
            face_image = image[top-plus:bottom+plus, left-plus:right]
          elif top <= plus:
            face_image = image[0:bottom+plus, left-plus:right+plus]
          elif bottom <= plus:
            face_image = image[top-plus:bottom, left-plus:right+plus]
          else:
            face_image = image[top-plus:bottom+plus, left-plus:right+plus]
          

          pil_image = pil_image + [face_image]
       
    idx = luas.index(max(luas))

    img = Image.fromarray(pil_image[idx])
    return img